/*
Лекция 10 от 7.09.23
Пример описывает классный журнал, состоящий из класса Row (Ученик и его оценки), Grade (оценки),
SubjectRegister (непосредственно сам журнал, состоящий из строчек Row)
*/

/*
Лекция 11 от 12.09.23
Рассматривали наследование на примере животных кошечек,
собачек. Показали структур проекта и как назначать папку тест
для проведения unit-тестов
Поговорили обстрактных классах и методах. Абстрактные классы нельзя инстанцировать, т.е. нельзя создать объект с классом абстракт
*/

/*
Лекция 12 от 15.09.23
Рассматриваем перегрузку методов (Overload)
Интерфейсы имеют только методы и только абстрактные, а у классов только поля и конструкторы
Т.е. итерфейсы используются для имплементации методов разным классам, которые не имеют ничего общего:
Н/р муха и вертолет имеют общий интерфейс Жужалибл, они оба могут жужать
Рассмотрели еще модификатор final, он используется в нескольких случаях:
- если он используется с полем или с переменной, это значит что мы этому полю/переменной присваиваем всего 1 раз, после этого его изменить нельзя
static final - константа
- eсли используется для метода, который будет использоваться всегда в независимости от имплементации
*/

/*
Лекция 14 от 21.09.23
- В интерфейсе все методы публичные
- Нельзя создать экземпляр интерфейса
- Главное отличие интерфейса от абстрактного класса: в интерфейсе нет полей
Когда работаем с коллекциями, мы работаем через интерфейсы (List - это интерфейс)
Generic - механизм, который позволяет использовать несколько типов в одном классе,
В Generic всегда используется reference type
Интерфейс Set не запоминает порядок добавления, но по нему поиск выполняется быстрее чем по List
В интерфейсе Map идет два generic
*/

/*
Лекция 25 2.11.23
Exceptions - исключение, которое требует проверки. Если мы объяеми ексептион в методе, то его необходимо объявить
в заголовке метода и заключить в try/catch методы, которые могут его вызывать
RuntimeExeption - исключение, которое требует проверки.Все наоборот по сравнению с проверяемым Exceptions
*/